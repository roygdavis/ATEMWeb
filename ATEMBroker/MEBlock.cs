using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using SixteenMedia.ATEM.Broker.BMDSwitcherAPI;

namespace SixteenMedia.ATEM.Wrapper
{
    /// <summary>
    /// Helper class to expose BMD ME block methods from Get/Set methods to .Net properties
    /// </summary>
    [DataContract]
    public class MEBlock : IBMDSwitcherMixEffectBlockCallback, IDisposable
    {
        /// <summary>
        /// The IBMDSwitcherMixEffectBlock Context
        /// </summary>
        public IBMDSwitcherMixEffectBlock MEBlockContext { get; private set; }

        /// <summary>
        /// The unique Block Index
        /// </summary>
        [DataMember]
        public int MEBlockIndex { get; set; }

        #region Constructor
        /// <summary>
        /// Initiate this class with a valid IBMDSwitcherMixEffectBlock class.
        /// </summary>
        /// <param name="meBlock">An IBMDSwitcherMixEffectBlock object generated by </param>
        public MEBlock(IBMDSwitcherMixEffectBlock meBlock, int meBlockIndex)
        {
            MEBlockContext = meBlock;
            MEBlockContext.AddCallback(this);
            MEBlockIndex = meBlockIndex;
        }
        #endregion

        #region Public Mix Effect Getter/Setters
        [DataMember]
        public long ProgramInput
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetProgramInput(out long v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetProgramInput(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public long PreviewInput
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetPreviewInput(out long v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetPreviewInput(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public int PreviewLive
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetPreviewLive(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }
        }

        [DataMember]
        public int PreviewTransition
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetPreviewTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetPreviewTransition(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public int InTransition
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetInTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }

        }

        [DataMember]
        public double TransitionPosition
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetTransitionPosition(out double v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetTransitionPosition(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public uint TransitionFramesRemaining
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetTransitionFramesRemaining(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }

        }

        [DataMember]
        public uint FadeToBlackRate
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetFadeToBlackRate(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetFadeToBlackRate(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public uint FadeToBlackFramesRemaining
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetFadeToBlackFramesRemaining(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }

        }

        [DataMember]
        public int FadeToBlackFullyBlack
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetFadeToBlackFullyBlack(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.SetFadeToBlackFullyBlack(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        [DataMember]
        public int InFadeToBlack
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetInFadeToBlack(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }

        }

        [DataMember]
        public int FadeToBlackInTransition
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetFadeToBlackInTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }

        }

        [DataMember]
        public _BMDSwitcherInputAvailability InputAvailabilityMask
        {
            get
            {
                if (MEBlockContext != null)
                {
                    MEBlockContext.GetInputAvailabilityMask(out _BMDSwitcherInputAvailability v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            // empty setter so that this property can be serialised
            set { }
        }
        #endregion

        #region Event handling

        public event EventHandler<MixEffectsEventArgs> ProgramInputChanged;
        public event EventHandler<MixEffectsEventArgs> PreviewInputChanged;
        public event EventHandler<MixEffectsEventArgs> TransitionFramesRemainingChanged;
        public event EventHandler<MixEffectsEventArgs> TransitionPositionChanged;
        public event EventHandler<MixEffectsEventArgs> InTransitionChanged;
        public event EventHandler<MixEffectsEventArgs> InFadeToBlackChanged;
        public event EventHandler<MixEffectsEventArgs> FadeToBlackFramesRemainingChanged;
        public event EventHandler<MixEffectsEventArgs> PreviewLiveChanged;
        public event EventHandler<MixEffectsEventArgs> PreviewTransitionChanged;
        public event EventHandler<MixEffectsEventArgs> AvailabilityMaskChanged;
        public event EventHandler<MixEffectsEventArgs> FadeToBlackRateChanged;
        public event EventHandler<MixEffectsEventArgs> FadeToBlackFullyBlackChanged;
        public event EventHandler<MixEffectsEventArgs> FadeToBlackInTransitionChanged;
        public event EventHandler<MixEffectsEventArgs> InputAvailabilityMaskChanged;

        public void Notify(_BMDSwitcherMixEffectBlockEventType eventType)
        {
            switch (eventType)
            {
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeProgramInputChanged:
                    ProgramInputChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewInputChanged:
                    PreviewInputChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Preview,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeTransitionPositionChanged:
                    TransitionPositionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeTransitionFramesRemainingChanged:
                    TransitionFramesRemainingChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInTransitionChanged:
                    InTransitionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackFramesRemainingChanged:
                    FadeToBlackFramesRemainingChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInFadeToBlackChanged:
                    InFadeToBlackChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewLiveChanged:
                    PreviewLiveChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Preview,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewTransitionChanged:
                    PreviewTransitionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Preview,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInputAvailabilityMaskChanged:
                    InputAvailabilityMaskChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.None,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackRateChanged:
                    FadeToBlackRateChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.None,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackFullyBlackChanged:
                    FadeToBlackFullyBlackChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackInTransitionChanged:
                    FadeToBlackInTransitionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition,
                        MixEffectsIndex = this.MEBlockIndex
                    });
                    break;
                default:
                    break;
            }
        }
        #endregion

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                MEBlockContext.RemoveCallback(this);
                MEBlockContext = null;

                disposedValue = true;
            }
        }

        ~MEBlock()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(false);
        }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}