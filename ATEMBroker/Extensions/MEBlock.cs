using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SixteenMedia.ATEM.Broker.BMDSwitcherAPI;

namespace SixteenMedia.ATEM.Broker.Extensions
{
    /// <summary>
    /// Helper class to expose BMD ME block methods from Get/Set methods to .Net properties
    /// </summary>
    public class MEBlock: IBMDSwitcherMixEffectBlockCallback,IDisposable
    {
        /// <summary>
        /// The Mix Effect Block interface
        /// </summary>
        private IBMDSwitcherMixEffectBlock _meBlock;

        /// <summary>
        /// The IBMDSwitcherMixEffectBlock Context
        /// </summary>
        public IBMDSwitcherMixEffectBlock MEBlockContext
        {
            get
            {
                return _meBlock;
            }
        }

        /// <summary>
        /// The unique Block Index
        /// </summary>
        public int MEBlockIndex { get; set; }

        /// <summary>
        /// Initiate this class with a valid IBMDSwitcherMixEffectBlock class.
        /// </summary>
        /// <param name="meBlock">An IBMDSwitcherMixEffectBlock object generated by </param>
        public MEBlock(IBMDSwitcherMixEffectBlock meBlock,int meBlockIndex)
        {
            _meBlock = meBlock;
            _meBlock.AddCallback(this);
            MEBlockIndex = meBlockIndex;
        }

        #region Public Mix Effect Getter/Setters
        public long ProgramInput
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetProgramInput(out long v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetProgramInput(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public long PreviewInput
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetPreviewInput(out long v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetPreviewInput(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public int PreviewLive
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetPreviewLive(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public int PreviewTransition
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetPreviewTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetPreviewTransition(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public int InTransition
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetInTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public double TransitionPosition
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetTransitionPosition(out double v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetTransitionPosition(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public uint TransitionFramesRemaining
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetTransitionFramesRemaining(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public uint FadeToBlackRate
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetFadeToBlackRate(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetFadeToBlackRate(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public uint FadeToBlackFramesRemaining
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetFadeToBlackFramesRemaining(out uint v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public int FadeToBlackFullyBlack
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetFadeToBlackFullyBlack(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
            set
            {
                if (_meBlock != null)
                {
                    _meBlock.SetFadeToBlackFullyBlack(value);
                }
                else
                {
                    throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
                }
            }
        }

        public int InFadeToBlack
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetInFadeToBlack(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public int FadeToBlackInTransition
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetFadeToBlackInTransition(out int v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }

        public _BMDSwitcherInputAvailability InputAvailabilityMask
        {
            get
            {
                if (_meBlock != null)
                {
                    _meBlock.GetInputAvailabilityMask(out _BMDSwitcherInputAvailability v);
                    return v;
                }
                throw new NullReferenceException("Mix Effect Block has been de-referenced/nullified");
            }
        }
        #endregion

        #region Event handling
        // Events:
        public event EventHandler<MixEffectsEventArgs> ProgramInputChanged;
        public event EventHandler<MixEffectsEventArgs> PreviewInputChanged;
        public event EventHandler<MixEffectsEventArgs> TransitionFramesRemainingChanged;
        public event EventHandler<MixEffectsEventArgs> TransitionPositionChanged;
        public event EventHandler<MixEffectsEventArgs> InTransitionChanged;

        public void Notify(_BMDSwitcherMixEffectBlockEventType eventType)
        {
            switch (eventType)
            {
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeProgramInputChanged:
                    ProgramInputChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewInputChanged:
                    PreviewInputChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Preview,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeTransitionPositionChanged:
                    TransitionPositionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeTransitionFramesRemainingChanged:
                    TransitionFramesRemainingChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInTransitionChanged:
                    InTransitionChanged?.Invoke(this, new MixEffectsEventArgs()
                    {
                        Input = ProgramInput,
                        InTransition = InTransition,
                        MEBus = MEBuses.Program,
                        TransitionFramesRemaining = TransitionFramesRemaining,
                        TransitionPosition = TransitionPosition
                    });
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackFramesRemainingChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInFadeToBlackChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewLiveChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypePreviewTransitionChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeInputAvailabilityMaskChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackRateChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackFullyBlackChanged:
                    break;
                case _BMDSwitcherMixEffectBlockEventType.bmdSwitcherMixEffectBlockEventTypeFadeToBlackInTransitionChanged:
                    break;
                default:
                    break;
            }
        }
        #endregion

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                _meBlock.RemoveCallback(this);
                _meBlock = null;

                disposedValue = true;
            }
        }

        ~MEBlock()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(false);
        }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}
